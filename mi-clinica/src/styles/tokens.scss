@use 'sass:map';

// Color palette sourced from the legacy dashboard theme.
$color-palette: (
  blue: #5e50f9,
  indigo: #6610f2,
  purple: #7b20c7,
  pink: #e91e63,
  red: #f96868,
  orange: #f2a654,
  yellow: #f6e84e,
  green: #46c35f,
  teal: #58d8a3,
  cyan: #00cccc,
  white: #ffffff,
  white-smoke: #f2f7f8,
  violet: #41478a,
  'dark-slate-gray': #2e383e,
  'dodger-blue': #3498db,
  'cyan-dark': #006cff
);

// Semantic theme colors extracted from the dashboard.
$theme-colors: (
  primary: #1f3bb3,
  secondary: #05c3fb,
  success: #34b1aa,
  info: #51b1e1,
  warning: #e29e09,
  danger: #f95f53,
  light: #e9e9e9,
  dark: #1e283d,
  purple: map.get($color-palette, purple)
);

// Additional UI colors referenced across the legacy stylesheets.
$semantic-colors: (
  'content-bg': #f4f5f7,
  'border': #dee2e6,
  'text-muted': #737f8b,
  'text-default': #1f1f1f,
  'highlight': #52c4ff,
  'surface-contrast': #ffffff
);

// Typography tokens derived from the dashboard system.
$font-families: (
  body: ('Manrope', sans-serif),
  heading: ('Manrope', sans-serif),
  monospace: ('JetBrains Mono', monospace)
);

$font-sizes: (
  body: 0.812rem,
  lead: 1rem,
  h1: 3.125rem,
  h2: 1.625rem,
  h3: 1.525rem,
  h4: 1.125rem,
  h5: 1rem,
  h6: 0.9375rem,
  'display-1': 3.75rem,
  'display-2': 3.125rem,
  'display-3': 2.5rem,
  'display-4': 1.875rem,
  'display-5': 1.25rem,
  button: 0.875rem,
  label: 0.812rem,
  caption: 0.625rem
);

$line-heights: (
  body: 1.3rem,
  heading: 1,
  display: 1,
  tight: 1.1,
  relaxed: 1.5
);

/// Safely reads a token from a map and raises a helpful error when the token is unknown.
/// @access public
/// @param {Map} $map - Source map.
/// @param {String} $token - Token to lookup.
/// @param {String} $label - Friendly label for error messages.
/// @return {*} The token value.
@function get-token($map, $token, $label) {
  @if map.has-key($map, $token) {
    @return map.get($map, $token);
  }

  @error 'Unknown #{ $label } token `#{ $token }`. Available tokens: #{ map.keys($map) }';
}

/// Fetches a color token from a palette.
/// @param {String} $token - Color token key.
/// @param {Map} $map - Palette to search. Defaults to `$theme-colors`.
/// @return {Color} - The requested color value.
@function color($token, $map: $theme-colors) {
  @return get-token($map, $token, 'color');
}

/// Applies a color token to the `color` property.
/// @param {String} $token - Token to apply.
/// @param {Map} $map - Palette map. Defaults to `$theme-colors`.
@mixin text-color($token, $map: $theme-colors) {
  color: color($token, $map);
}

/// Applies a color token to the `background-color` property.
/// @param {String} $token - Token to apply.
/// @param {Map} $map - Palette map. Defaults to `$theme-colors`.
@mixin background-color($token, $map: $theme-colors) {
  background-color: color($token, $map);
}

/// Applies a color token to the `border-color` property.
/// @param {String} $token - Token to apply.
/// @param {Map} $map - Palette map. Defaults to `$theme-colors`.
@mixin border-color($token, $map: $theme-colors) {
  border-color: color($token, $map);
}

/// Retrieves a font-family token.
/// @param {String} $token - Font family token key.
/// @return {List} Font family value.
@function font-family($token: body) {
  @return get-token($font-families, $token, 'font family');
}

/// Retrieves a font-size token.
/// @param {String} $token - Font size token key.
/// @return {Number} Font size value.
@function font-size($token: body) {
  @return get-token($font-sizes, $token, 'font size');
}

/// Retrieves a line-height token.
/// @param {String} $token - Line height token key.
/// @return {Number} Line height value.
@function line-height($token: body) {
  @return get-token($line-heights, $token, 'line height');
}

/// Composite font mixin that applies family, size, weight and line-height tokens.
/// @param {String} $size-token - Font-size token key.
/// @param {String} $family-token - Font-family token key.
/// @param {Number} $weight - Font weight.
/// @param {String|null} $line-height-token - Line-height token key. When omitted the mixin
/// tries to infer a sensible default for headings and body copy.
@mixin font($size-token: body, $family-token: body, $weight: 400, $line-height-token: null) {
  font-family: font-family($family-token);
  font-size: font-size($size-token);
  font-weight: $weight;

  @if $line-height-token != null {
    line-height: line-height($line-height-token);
  } @else if map.has-key($line-heights, $size-token) {
    line-height: line-height($size-token);
  } @else {
    line-height: line-height(body);
  }
}

